#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace code
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Venture_Market")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAngel_Interest(Angel_Interest instance);
    partial void UpdateAngel_Interest(Angel_Interest instance);
    partial void DeleteAngel_Interest(Angel_Interest instance);
    partial void InsertAngelInvestor(AngelInvestor instance);
    partial void UpdateAngelInvestor(AngelInvestor instance);
    partial void DeleteAngelInvestor(AngelInvestor instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertBusiness_Incubator(Business_Incubator instance);
    partial void UpdateBusiness_Incubator(Business_Incubator instance);
    partial void DeleteBusiness_Incubator(Business_Incubator instance);
    partial void InsertDevelopment_Stage(Development_Stage instance);
    partial void UpdateDevelopment_Stage(Development_Stage instance);
    partial void DeleteDevelopment_Stage(Development_Stage instance);
    partial void InsertIndustry_Interests_List(Industry_Interests_List instance);
    partial void UpdateIndustry_Interests_List(Industry_Interests_List instance);
    partial void DeleteIndustry_Interests_List(Industry_Interests_List instance);
    partial void InsertInvestment_Company(Investment_Company instance);
    partial void UpdateInvestment_Company(Investment_Company instance);
    partial void DeleteInvestment_Company(Investment_Company instance);
    partial void InsertInvestment_Manager(Investment_Manager instance);
    partial void UpdateInvestment_Manager(Investment_Manager instance);
    partial void DeleteInvestment_Manager(Investment_Manager instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRound_Investor(Round_Investor instance);
    partial void UpdateRound_Investor(Round_Investor instance);
    partial void DeleteRound_Investor(Round_Investor instance);
    partial void InsertRound_Of_Funding(Round_Of_Funding instance);
    partial void UpdateRound_Of_Funding(Round_Of_Funding instance);
    partial void DeleteRound_Of_Funding(Round_Of_Funding instance);
    partial void InsertStartup(Startup instance);
    partial void UpdateStartup(Startup instance);
    partial void DeleteStartup(Startup instance);
    partial void InsertStartup_Member(Startup_Member instance);
    partial void UpdateStartup_Member(Startup_Member instance);
    partial void DeleteStartup_Member(Startup_Member instance);
    partial void InsertUser_Role(User_Role instance);
    partial void UpdateUser_Role(User_Role instance);
    partial void DeleteUser_Role(User_Role instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::code.Properties.Settings.Default.Venture_MarketConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Angel_Interest> Angel_Interests
		{
			get
			{
				return this.GetTable<Angel_Interest>();
			}
		}
		
		public System.Data.Linq.Table<AngelInvestor> AngelInvestors
		{
			get
			{
				return this.GetTable<AngelInvestor>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<Business_Incubator> Business_Incubators
		{
			get
			{
				return this.GetTable<Business_Incubator>();
			}
		}
		
		public System.Data.Linq.Table<Development_Stage> Development_Stages
		{
			get
			{
				return this.GetTable<Development_Stage>();
			}
		}
		
		public System.Data.Linq.Table<Industry_Interests_List> Industry_Interests_Lists
		{
			get
			{
				return this.GetTable<Industry_Interests_List>();
			}
		}
		
		public System.Data.Linq.Table<Investment_Company> Investment_Companies
		{
			get
			{
				return this.GetTable<Investment_Company>();
			}
		}
		
		public System.Data.Linq.Table<Investment_Manager> Investment_Managers
		{
			get
			{
				return this.GetTable<Investment_Manager>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Round_Investor> Round_Investors
		{
			get
			{
				return this.GetTable<Round_Investor>();
			}
		}
		
		public System.Data.Linq.Table<Round_Of_Funding> Round_Of_Fundings
		{
			get
			{
				return this.GetTable<Round_Of_Funding>();
			}
		}
		
		public System.Data.Linq.Table<Startup> Startups
		{
			get
			{
				return this.GetTable<Startup>();
			}
		}
		
		public System.Data.Linq.Table<Startup_Member> Startup_Members
		{
			get
			{
				return this.GetTable<Startup_Member>();
			}
		}
		
		public System.Data.Linq.Table<User_Role> User_Roles
		{
			get
			{
				return this.GetTable<User_Role>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Angel_Interests")]
	public partial class Angel_Interest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InterestID;
		
		private int _AngelID;
		
		private EntityRef<AngelInvestor> _AngelInvestor;
		
		private EntityRef<Industry_Interests_List> _Industry_Interests_List;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInterestIDChanging(int value);
    partial void OnInterestIDChanged();
    partial void OnAngelIDChanging(int value);
    partial void OnAngelIDChanged();
    #endregion
		
		public Angel_Interest()
		{
			this._AngelInvestor = default(EntityRef<AngelInvestor>);
			this._Industry_Interests_List = default(EntityRef<Industry_Interests_List>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InterestID
		{
			get
			{
				return this._InterestID;
			}
			set
			{
				if ((this._InterestID != value))
				{
					if (this._Industry_Interests_List.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInterestIDChanging(value);
					this.SendPropertyChanging();
					this._InterestID = value;
					this.SendPropertyChanged("InterestID");
					this.OnInterestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AngelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AngelID
		{
			get
			{
				return this._AngelID;
			}
			set
			{
				if ((this._AngelID != value))
				{
					if (this._AngelInvestor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAngelIDChanging(value);
					this.SendPropertyChanging();
					this._AngelID = value;
					this.SendPropertyChanged("AngelID");
					this.OnAngelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AngelInvestor_Angel_Interest", Storage="_AngelInvestor", ThisKey="AngelID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AngelInvestor AngelInvestor
		{
			get
			{
				return this._AngelInvestor.Entity;
			}
			set
			{
				AngelInvestor previousValue = this._AngelInvestor.Entity;
				if (((previousValue != value) 
							|| (this._AngelInvestor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AngelInvestor.Entity = null;
						previousValue.Angel_Interests.Remove(this);
					}
					this._AngelInvestor.Entity = value;
					if ((value != null))
					{
						value.Angel_Interests.Add(this);
						this._AngelID = value.ID;
					}
					else
					{
						this._AngelID = default(int);
					}
					this.SendPropertyChanged("AngelInvestor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Industry_Interests_List_Angel_Interest", Storage="_Industry_Interests_List", ThisKey="InterestID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Industry_Interests_List Industry_Interests_List
		{
			get
			{
				return this._Industry_Interests_List.Entity;
			}
			set
			{
				Industry_Interests_List previousValue = this._Industry_Interests_List.Entity;
				if (((previousValue != value) 
							|| (this._Industry_Interests_List.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Industry_Interests_List.Entity = null;
						previousValue.Angel_Interests.Remove(this);
					}
					this._Industry_Interests_List.Entity = value;
					if ((value != null))
					{
						value.Angel_Interests.Add(this);
						this._InterestID = value.ID;
					}
					else
					{
						this._InterestID = default(int);
					}
					this.SendPropertyChanged("Industry_Interests_List");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AngelInvestor")]
	public partial class AngelInvestor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Investment_Experience;
		
		private System.Nullable<decimal> _Min_Amount;
		
		private System.Nullable<decimal> _Max_amount;
		
		private string _Phone;
		
		private string _Skype;
		
		private string _Twitter;
		
		private EntitySet<Angel_Interest> _Angel_Interests;
		
		private EntitySet<Round_Investor> _Round_Investors;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnInvestment_ExperienceChanging(string value);
    partial void OnInvestment_ExperienceChanged();
    partial void OnMin_AmountChanging(System.Nullable<decimal> value);
    partial void OnMin_AmountChanged();
    partial void OnMax_amountChanging(System.Nullable<decimal> value);
    partial void OnMax_amountChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnSkypeChanging(string value);
    partial void OnSkypeChanged();
    partial void OnTwitterChanging(string value);
    partial void OnTwitterChanged();
    #endregion
		
		public AngelInvestor()
		{
			this._Angel_Interests = new EntitySet<Angel_Interest>(new Action<Angel_Interest>(this.attach_Angel_Interests), new Action<Angel_Interest>(this.detach_Angel_Interests));
			this._Round_Investors = new EntitySet<Round_Investor>(new Action<Round_Investor>(this.attach_Round_Investors), new Action<Round_Investor>(this.detach_Round_Investors));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Investment_Experience", DbType="NVarChar(MAX)")]
		public string Investment_Experience
		{
			get
			{
				return this._Investment_Experience;
			}
			set
			{
				if ((this._Investment_Experience != value))
				{
					this.OnInvestment_ExperienceChanging(value);
					this.SendPropertyChanging();
					this._Investment_Experience = value;
					this.SendPropertyChanged("Investment_Experience");
					this.OnInvestment_ExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Min_Amount", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> Min_Amount
		{
			get
			{
				return this._Min_Amount;
			}
			set
			{
				if ((this._Min_Amount != value))
				{
					this.OnMin_AmountChanging(value);
					this.SendPropertyChanging();
					this._Min_Amount = value;
					this.SendPropertyChanged("Min_Amount");
					this.OnMin_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max_amount", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> Max_amount
		{
			get
			{
				return this._Max_amount;
			}
			set
			{
				if ((this._Max_amount != value))
				{
					this.OnMax_amountChanging(value);
					this.SendPropertyChanging();
					this._Max_amount = value;
					this.SendPropertyChanged("Max_amount");
					this.OnMax_amountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(45)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skype", DbType="NVarChar(45)")]
		public string Skype
		{
			get
			{
				return this._Skype;
			}
			set
			{
				if ((this._Skype != value))
				{
					this.OnSkypeChanging(value);
					this.SendPropertyChanging();
					this._Skype = value;
					this.SendPropertyChanged("Skype");
					this.OnSkypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Twitter", DbType="NVarChar(45)")]
		public string Twitter
		{
			get
			{
				return this._Twitter;
			}
			set
			{
				if ((this._Twitter != value))
				{
					this.OnTwitterChanging(value);
					this.SendPropertyChanging();
					this._Twitter = value;
					this.SendPropertyChanged("Twitter");
					this.OnTwitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AngelInvestor_Angel_Interest", Storage="_Angel_Interests", ThisKey="ID", OtherKey="AngelID")]
		public EntitySet<Angel_Interest> Angel_Interests
		{
			get
			{
				return this._Angel_Interests;
			}
			set
			{
				this._Angel_Interests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AngelInvestor_Round_Investor", Storage="_Round_Investors", ThisKey="ID", OtherKey="AngelID")]
		public EntitySet<Round_Investor> Round_Investors
		{
			get
			{
				return this._Round_Investors;
			}
			set
			{
				this._Round_Investors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AngelInvestor", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AngelInvestors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AngelInvestors.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Angel_Interests(Angel_Interest entity)
		{
			this.SendPropertyChanging();
			entity.AngelInvestor = this;
		}
		
		private void detach_Angel_Interests(Angel_Interest entity)
		{
			this.SendPropertyChanging();
			entity.AngelInvestor = null;
		}
		
		private void attach_Round_Investors(Round_Investor entity)
		{
			this.SendPropertyChanging();
			entity.AngelInvestor = this;
		}
		
		private void detach_Round_Investors(Round_Investor entity)
		{
			this.SendPropertyChanging();
			entity.AngelInvestor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ManagerID;
		
		private int _StartupID;
		
		private string _State;
		
		private int _Application_Round;
		
		private System.DateTime _CreationDate;
		
		private EntityRef<Investment_Manager> _Investment_Manager;
		
		private EntityRef<Startup> _Startup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnManagerIDChanging(System.Nullable<int> value);
    partial void OnManagerIDChanged();
    partial void OnStartupIDChanging(int value);
    partial void OnStartupIDChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnApplication_RoundChanging(int value);
    partial void OnApplication_RoundChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
		
		public Application()
		{
			this._Investment_Manager = default(EntityRef<Investment_Manager>);
			this._Startup = default(EntityRef<Startup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerID", DbType="Int")]
		public System.Nullable<int> ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					if (this._Investment_Manager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartupID", DbType="Int NOT NULL")]
		public int StartupID
		{
			get
			{
				return this._StartupID;
			}
			set
			{
				if ((this._StartupID != value))
				{
					if (this._Startup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStartupIDChanging(value);
					this.SendPropertyChanging();
					this._StartupID = value;
					this.SendPropertyChanged("StartupID");
					this.OnStartupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(45) NOT NULL")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application_Round", DbType="Int NOT NULL")]
		public int Application_Round
		{
			get
			{
				return this._Application_Round;
			}
			set
			{
				if ((this._Application_Round != value))
				{
					this.OnApplication_RoundChanging(value);
					this.SendPropertyChanging();
					this._Application_Round = value;
					this.SendPropertyChanged("Application_Round");
					this.OnApplication_RoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Investment_Manager_Application", Storage="_Investment_Manager", ThisKey="ManagerID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Investment_Manager Investment_Manager
		{
			get
			{
				return this._Investment_Manager.Entity;
			}
			set
			{
				Investment_Manager previousValue = this._Investment_Manager.Entity;
				if (((previousValue != value) 
							|| (this._Investment_Manager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Investment_Manager.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._Investment_Manager.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._ManagerID = value.ID;
					}
					else
					{
						this._ManagerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Investment_Manager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Startup_Application", Storage="_Startup", ThisKey="StartupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Startup Startup
		{
			get
			{
				return this._Startup.Entity;
			}
			set
			{
				Startup previousValue = this._Startup.Entity;
				if (((previousValue != value) 
							|| (this._Startup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Startup.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._Startup.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._StartupID = value.ID;
					}
					else
					{
						this._StartupID = default(int);
					}
					this.SendPropertyChanged("Startup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Business_Incubator")]
	public partial class Business_Incubator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private System.Nullable<int> _Number_Of_Seats;
		
		private string _Address;
		
		private string _Website;
		
		private EntitySet<Startup> _Startups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnNumber_Of_SeatsChanging(System.Nullable<int> value);
    partial void OnNumber_Of_SeatsChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    #endregion
		
		public Business_Incubator()
		{
			this._Startups = new EntitySet<Startup>(new Action<Startup>(this.attach_Startups), new Action<Startup>(this.detach_Startups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number_Of_Seats", DbType="Int")]
		public System.Nullable<int> Number_Of_Seats
		{
			get
			{
				return this._Number_Of_Seats;
			}
			set
			{
				if ((this._Number_Of_Seats != value))
				{
					this.OnNumber_Of_SeatsChanging(value);
					this.SendPropertyChanging();
					this._Number_Of_Seats = value;
					this.SendPropertyChanged("Number_Of_Seats");
					this.OnNumber_Of_SeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(63)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Business_Incubator_Startup", Storage="_Startups", ThisKey="ID", OtherKey="IncubID")]
		public EntitySet<Startup> Startups
		{
			get
			{
				return this._Startups;
			}
			set
			{
				this._Startups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Startups(Startup entity)
		{
			this.SendPropertyChanging();
			entity.Business_Incubator = this;
		}
		
		private void detach_Startups(Startup entity)
		{
			this.SendPropertyChanging();
			entity.Business_Incubator = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Development_Stage")]
	public partial class Development_Stage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Stage;
		
		private EntitySet<Startup> _Startups1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStageChanging(string value);
    partial void OnStageChanged();
    #endregion
		
		public Development_Stage()
		{
			this._Startups1 = new EntitySet<Startup>(new Action<Startup>(this.attach_Startups1), new Action<Startup>(this.detach_Startups1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stage", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string Stage
		{
			get
			{
				return this._Stage;
			}
			set
			{
				if ((this._Stage != value))
				{
					this.OnStageChanging(value);
					this.SendPropertyChanging();
					this._Stage = value;
					this.SendPropertyChanged("Stage");
					this.OnStageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Development_Stage_Startup", Storage="_Startups1", ThisKey="ID", OtherKey="DevStageID")]
		public EntitySet<Startup> Startups1
		{
			get
			{
				return this._Startups1;
			}
			set
			{
				this._Startups1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Startups1(Startup entity)
		{
			this.SendPropertyChanging();
			entity.Development_Stage1 = this;
		}
		
		private void detach_Startups1(Startup entity)
		{
			this.SendPropertyChanging();
			entity.Development_Stage1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Industry_Interests_List")]
	public partial class Industry_Interests_List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<Angel_Interest> _Angel_Interests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Industry_Interests_List()
		{
			this._Angel_Interests = new EntitySet<Angel_Interest>(new Action<Angel_Interest>(this.attach_Angel_Interests), new Action<Angel_Interest>(this.detach_Angel_Interests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(45)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Industry_Interests_List_Angel_Interest", Storage="_Angel_Interests", ThisKey="ID", OtherKey="InterestID")]
		public EntitySet<Angel_Interest> Angel_Interests
		{
			get
			{
				return this._Angel_Interests;
			}
			set
			{
				this._Angel_Interests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Angel_Interests(Angel_Interest entity)
		{
			this.SendPropertyChanging();
			entity.Industry_Interests_List = this;
		}
		
		private void detach_Angel_Interests(Angel_Interest entity)
		{
			this.SendPropertyChanging();
			entity.Industry_Interests_List = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Investment_Company")]
	public partial class Investment_Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Website;
		
		private System.Nullable<System.DateTime> _Foundation_Date;
		
		private string _Office_Address;
		
		private string _CEO;
		
		private EntitySet<Investment_Manager> _Investment_Managers;
		
		private EntitySet<Round_Investor> _Round_Investors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnFoundation_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnFoundation_DateChanged();
    partial void OnOffice_AddressChanging(string value);
    partial void OnOffice_AddressChanged();
    partial void OnCEOChanging(string value);
    partial void OnCEOChanged();
    #endregion
		
		public Investment_Company()
		{
			this._Investment_Managers = new EntitySet<Investment_Manager>(new Action<Investment_Manager>(this.attach_Investment_Managers), new Action<Investment_Manager>(this.detach_Investment_Managers));
			this._Round_Investors = new EntitySet<Round_Investor>(new Action<Round_Investor>(this.attach_Round_Investors), new Action<Round_Investor>(this.detach_Round_Investors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(63)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foundation_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Foundation_Date
		{
			get
			{
				return this._Foundation_Date;
			}
			set
			{
				if ((this._Foundation_Date != value))
				{
					this.OnFoundation_DateChanging(value);
					this.SendPropertyChanging();
					this._Foundation_Date = value;
					this.SendPropertyChanged("Foundation_Date");
					this.OnFoundation_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Office_Address", DbType="NVarChar(255)")]
		public string Office_Address
		{
			get
			{
				return this._Office_Address;
			}
			set
			{
				if ((this._Office_Address != value))
				{
					this.OnOffice_AddressChanging(value);
					this.SendPropertyChanging();
					this._Office_Address = value;
					this.SendPropertyChanged("Office_Address");
					this.OnOffice_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CEO", DbType="NVarChar(255)")]
		public string CEO
		{
			get
			{
				return this._CEO;
			}
			set
			{
				if ((this._CEO != value))
				{
					this.OnCEOChanging(value);
					this.SendPropertyChanging();
					this._CEO = value;
					this.SendPropertyChanged("CEO");
					this.OnCEOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Investment_Company_Investment_Manager", Storage="_Investment_Managers", ThisKey="ID", OtherKey="Investment_CompanyID")]
		public EntitySet<Investment_Manager> Investment_Managers
		{
			get
			{
				return this._Investment_Managers;
			}
			set
			{
				this._Investment_Managers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Investment_Company_Round_Investor", Storage="_Round_Investors", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Round_Investor> Round_Investors
		{
			get
			{
				return this._Round_Investors;
			}
			set
			{
				this._Round_Investors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Investment_Managers(Investment_Manager entity)
		{
			this.SendPropertyChanging();
			entity.Investment_Company = this;
		}
		
		private void detach_Investment_Managers(Investment_Manager entity)
		{
			this.SendPropertyChanging();
			entity.Investment_Company = null;
		}
		
		private void attach_Round_Investors(Round_Investor entity)
		{
			this.SendPropertyChanging();
			entity.Investment_Company = this;
		}
		
		private void detach_Round_Investors(Round_Investor entity)
		{
			this.SendPropertyChanging();
			entity.Investment_Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Investment_Manager")]
	public partial class Investment_Manager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Investment_CompanyID;
		
		private int _UserID;
		
		private string _Geo_Inerests;
		
		private EntitySet<Application> _Applications;
		
		private EntityRef<Investment_Company> _Investment_Company;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvestment_CompanyIDChanging(System.Nullable<int> value);
    partial void OnInvestment_CompanyIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGeo_InerestsChanging(string value);
    partial void OnGeo_InerestsChanged();
    #endregion
		
		public Investment_Manager()
		{
			this._Applications = new EntitySet<Application>(new Action<Application>(this.attach_Applications), new Action<Application>(this.detach_Applications));
			this._Investment_Company = default(EntityRef<Investment_Company>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Investment_CompanyID", DbType="Int")]
		public System.Nullable<int> Investment_CompanyID
		{
			get
			{
				return this._Investment_CompanyID;
			}
			set
			{
				if ((this._Investment_CompanyID != value))
				{
					if (this._Investment_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvestment_CompanyIDChanging(value);
					this.SendPropertyChanging();
					this._Investment_CompanyID = value;
					this.SendPropertyChanged("Investment_CompanyID");
					this.OnInvestment_CompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Geo_Inerests", DbType="NVarChar(45)")]
		public string Geo_Inerests
		{
			get
			{
				return this._Geo_Inerests;
			}
			set
			{
				if ((this._Geo_Inerests != value))
				{
					this.OnGeo_InerestsChanging(value);
					this.SendPropertyChanging();
					this._Geo_Inerests = value;
					this.SendPropertyChanged("Geo_Inerests");
					this.OnGeo_InerestsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Investment_Manager_Application", Storage="_Applications", ThisKey="ID", OtherKey="ManagerID")]
		public EntitySet<Application> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Investment_Company_Investment_Manager", Storage="_Investment_Company", ThisKey="Investment_CompanyID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Investment_Company Investment_Company
		{
			get
			{
				return this._Investment_Company.Entity;
			}
			set
			{
				Investment_Company previousValue = this._Investment_Company.Entity;
				if (((previousValue != value) 
							|| (this._Investment_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Investment_Company.Entity = null;
						previousValue.Investment_Managers.Remove(this);
					}
					this._Investment_Company.Entity = value;
					if ((value != null))
					{
						value.Investment_Managers.Add(this);
						this._Investment_CompanyID = value.ID;
					}
					else
					{
						this._Investment_CompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Investment_Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Investment_Manager", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Investment_Managers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Investment_Managers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Investment_Manager = this;
		}
		
		private void detach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Investment_Manager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Role_Title;
		
		private string _Role_Description;
		
		private EntitySet<User_Role> _User_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRole_TitleChanging(string value);
    partial void OnRole_TitleChanged();
    partial void OnRole_DescriptionChanging(string value);
    partial void OnRole_DescriptionChanged();
    #endregion
		
		public Role()
		{
			this._User_Roles = new EntitySet<User_Role>(new Action<User_Role>(this.attach_User_Roles), new Action<User_Role>(this.detach_User_Roles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Title", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string Role_Title
		{
			get
			{
				return this._Role_Title;
			}
			set
			{
				if ((this._Role_Title != value))
				{
					this.OnRole_TitleChanging(value);
					this.SendPropertyChanging();
					this._Role_Title = value;
					this.SendPropertyChanged("Role_Title");
					this.OnRole_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Description", DbType="NVarChar(MAX)")]
		public string Role_Description
		{
			get
			{
				return this._Role_Description;
			}
			set
			{
				if ((this._Role_Description != value))
				{
					this.OnRole_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Role_Description = value;
					this.SendPropertyChanged("Role_Description");
					this.OnRole_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User_Role", Storage="_User_Roles", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<User_Role> User_Roles
		{
			get
			{
				return this._User_Roles;
			}
			set
			{
				this._User_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Roles(User_Role entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_User_Roles(User_Role entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Round_Investor")]
	public partial class Round_Investor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _CompanyID;
		
		private int _RoundID;
		
		private System.Nullable<int> _AngelID;
		
		private int _ID;
		
		private EntityRef<Investment_Company> _Investment_Company;
		
		private EntityRef<AngelInvestor> _AngelInvestor;
		
		private EntityRef<Round_Of_Funding> _Round_Of_Funding;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnRoundIDChanging(int value);
    partial void OnRoundIDChanged();
    partial void OnAngelIDChanging(System.Nullable<int> value);
    partial void OnAngelIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Round_Investor()
		{
			this._Investment_Company = default(EntityRef<Investment_Company>);
			this._AngelInvestor = default(EntityRef<AngelInvestor>);
			this._Round_Of_Funding = default(EntityRef<Round_Of_Funding>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
		public System.Nullable<int> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Investment_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundID", DbType="Int NOT NULL")]
		public int RoundID
		{
			get
			{
				return this._RoundID;
			}
			set
			{
				if ((this._RoundID != value))
				{
					if (this._Round_Of_Funding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundIDChanging(value);
					this.SendPropertyChanging();
					this._RoundID = value;
					this.SendPropertyChanged("RoundID");
					this.OnRoundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AngelID", DbType="Int")]
		public System.Nullable<int> AngelID
		{
			get
			{
				return this._AngelID;
			}
			set
			{
				if ((this._AngelID != value))
				{
					if (this._AngelInvestor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAngelIDChanging(value);
					this.SendPropertyChanging();
					this._AngelID = value;
					this.SendPropertyChanged("AngelID");
					this.OnAngelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Investment_Company_Round_Investor", Storage="_Investment_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Investment_Company Investment_Company
		{
			get
			{
				return this._Investment_Company.Entity;
			}
			set
			{
				Investment_Company previousValue = this._Investment_Company.Entity;
				if (((previousValue != value) 
							|| (this._Investment_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Investment_Company.Entity = null;
						previousValue.Round_Investors.Remove(this);
					}
					this._Investment_Company.Entity = value;
					if ((value != null))
					{
						value.Round_Investors.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Investment_Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AngelInvestor_Round_Investor", Storage="_AngelInvestor", ThisKey="AngelID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public AngelInvestor AngelInvestor
		{
			get
			{
				return this._AngelInvestor.Entity;
			}
			set
			{
				AngelInvestor previousValue = this._AngelInvestor.Entity;
				if (((previousValue != value) 
							|| (this._AngelInvestor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AngelInvestor.Entity = null;
						previousValue.Round_Investors.Remove(this);
					}
					this._AngelInvestor.Entity = value;
					if ((value != null))
					{
						value.Round_Investors.Add(this);
						this._AngelID = value.ID;
					}
					else
					{
						this._AngelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AngelInvestor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Round_Of_Funding_Round_Investor", Storage="_Round_Of_Funding", ThisKey="RoundID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Round_Of_Funding Round_Of_Funding
		{
			get
			{
				return this._Round_Of_Funding.Entity;
			}
			set
			{
				Round_Of_Funding previousValue = this._Round_Of_Funding.Entity;
				if (((previousValue != value) 
							|| (this._Round_Of_Funding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Round_Of_Funding.Entity = null;
						previousValue.Round_Investor = null;
					}
					this._Round_Of_Funding.Entity = value;
					if ((value != null))
					{
						value.Round_Investor = this;
						this._RoundID = value.ID;
					}
					else
					{
						this._RoundID = default(int);
					}
					this.SendPropertyChanged("Round_Of_Funding");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Round_Of_Funding")]
	public partial class Round_Of_Funding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StartupID;
		
		private string _Title;
		
		private System.Nullable<decimal> _Total_Investment;
		
		private string _Description;
		
		private EntityRef<Round_Investor> _Round_Investor;
		
		private EntityRef<Startup> _Startup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStartupIDChanging(int value);
    partial void OnStartupIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTotal_InvestmentChanging(System.Nullable<decimal> value);
    partial void OnTotal_InvestmentChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Round_Of_Funding()
		{
			this._Round_Investor = default(EntityRef<Round_Investor>);
			this._Startup = default(EntityRef<Startup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartupID", DbType="Int NOT NULL")]
		public int StartupID
		{
			get
			{
				return this._StartupID;
			}
			set
			{
				if ((this._StartupID != value))
				{
					if (this._Startup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStartupIDChanging(value);
					this.SendPropertyChanging();
					this._StartupID = value;
					this.SendPropertyChanged("StartupID");
					this.OnStartupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Investment", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> Total_Investment
		{
			get
			{
				return this._Total_Investment;
			}
			set
			{
				if ((this._Total_Investment != value))
				{
					this.OnTotal_InvestmentChanging(value);
					this.SendPropertyChanging();
					this._Total_Investment = value;
					this.SendPropertyChanged("Total_Investment");
					this.OnTotal_InvestmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Round_Of_Funding_Round_Investor", Storage="_Round_Investor", ThisKey="ID", OtherKey="RoundID", IsUnique=true, IsForeignKey=false)]
		public Round_Investor Round_Investor
		{
			get
			{
				return this._Round_Investor.Entity;
			}
			set
			{
				Round_Investor previousValue = this._Round_Investor.Entity;
				if (((previousValue != value) 
							|| (this._Round_Investor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Round_Investor.Entity = null;
						previousValue.Round_Of_Funding = null;
					}
					this._Round_Investor.Entity = value;
					if ((value != null))
					{
						value.Round_Of_Funding = this;
					}
					this.SendPropertyChanged("Round_Investor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Startup_Round_Of_Funding", Storage="_Startup", ThisKey="StartupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Startup Startup
		{
			get
			{
				return this._Startup.Entity;
			}
			set
			{
				Startup previousValue = this._Startup.Entity;
				if (((previousValue != value) 
							|| (this._Startup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Startup.Entity = null;
						previousValue.Round_Of_Fundings.Remove(this);
					}
					this._Startup.Entity = value;
					if ((value != null))
					{
						value.Round_Of_Fundings.Add(this);
						this._StartupID = value.ID;
					}
					else
					{
						this._StartupID = default(int);
					}
					this.SendPropertyChanged("Startup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Startup")]
	public partial class Startup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Business_Model;
		
		private System.Nullable<int> _Competitors;
		
		private string _Marketing_Strategy;
		
		private System.Nullable<decimal> _Total_Investment;
		
		private string _Website;
		
		private System.Nullable<System.DateTime> _Foundation_Date;
		
		private string _Twitter;
		
		private System.Nullable<int> _CEO;
		
		private System.Nullable<int> _IncubID;
		
		private int _DevStageID;
		
		private EntitySet<Application> _Applications;
		
		private EntitySet<Round_Of_Funding> _Round_Of_Fundings;
		
		private EntitySet<Startup> _Startups;
		
		private EntitySet<Startup_Member> _Startup_Members;
		
		private EntityRef<Startup> _Startup1;
		
		private EntityRef<Development_Stage> _Development_Stage1;
		
		private EntityRef<Business_Incubator> _Business_Incubator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBusiness_ModelChanging(string value);
    partial void OnBusiness_ModelChanged();
    partial void OnCompetitorsChanging(System.Nullable<int> value);
    partial void OnCompetitorsChanged();
    partial void OnMarketing_StrategyChanging(string value);
    partial void OnMarketing_StrategyChanged();
    partial void OnTotal_InvestmentChanging(System.Nullable<decimal> value);
    partial void OnTotal_InvestmentChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnFoundation_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnFoundation_DateChanged();
    partial void OnTwitterChanging(string value);
    partial void OnTwitterChanged();
    partial void OnceoIDChanging(System.Nullable<int> value);
    partial void OnceoIDChanged();
    partial void OnIncubIDChanging(System.Nullable<int> value);
    partial void OnIncubIDChanged();
    partial void OnDevStageIDChanging(int value);
    partial void OnDevStageIDChanged();
    #endregion
		
		public Startup()
		{
			this._Applications = new EntitySet<Application>(new Action<Application>(this.attach_Applications), new Action<Application>(this.detach_Applications));
			this._Round_Of_Fundings = new EntitySet<Round_Of_Funding>(new Action<Round_Of_Funding>(this.attach_Round_Of_Fundings), new Action<Round_Of_Funding>(this.detach_Round_Of_Fundings));
			this._Startups = new EntitySet<Startup>(new Action<Startup>(this.attach_Startups), new Action<Startup>(this.detach_Startups));
			this._Startup_Members = new EntitySet<Startup_Member>(new Action<Startup_Member>(this.attach_Startup_Members), new Action<Startup_Member>(this.detach_Startup_Members));
			this._Startup1 = default(EntityRef<Startup>);
			this._Development_Stage1 = default(EntityRef<Development_Stage>);
			this._Business_Incubator = default(EntityRef<Business_Incubator>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Business_Model", DbType="NVarChar(255)")]
		public string Business_Model
		{
			get
			{
				return this._Business_Model;
			}
			set
			{
				if ((this._Business_Model != value))
				{
					this.OnBusiness_ModelChanging(value);
					this.SendPropertyChanging();
					this._Business_Model = value;
					this.SendPropertyChanged("Business_Model");
					this.OnBusiness_ModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competitors", DbType="Int")]
		public System.Nullable<int> Competitors
		{
			get
			{
				return this._Competitors;
			}
			set
			{
				if ((this._Competitors != value))
				{
					if (this._Startup1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitorsChanging(value);
					this.SendPropertyChanging();
					this._Competitors = value;
					this.SendPropertyChanged("Competitors");
					this.OnCompetitorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Marketing_Strategy", DbType="NVarChar(255)")]
		public string Marketing_Strategy
		{
			get
			{
				return this._Marketing_Strategy;
			}
			set
			{
				if ((this._Marketing_Strategy != value))
				{
					this.OnMarketing_StrategyChanging(value);
					this.SendPropertyChanging();
					this._Marketing_Strategy = value;
					this.SendPropertyChanged("Marketing_Strategy");
					this.OnMarketing_StrategyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Investment", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> Total_Investment
		{
			get
			{
				return this._Total_Investment;
			}
			set
			{
				if ((this._Total_Investment != value))
				{
					this.OnTotal_InvestmentChanging(value);
					this.SendPropertyChanging();
					this._Total_Investment = value;
					this.SendPropertyChanged("Total_Investment");
					this.OnTotal_InvestmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(63)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foundation_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Foundation_Date
		{
			get
			{
				return this._Foundation_Date;
			}
			set
			{
				if ((this._Foundation_Date != value))
				{
					this.OnFoundation_DateChanging(value);
					this.SendPropertyChanging();
					this._Foundation_Date = value;
					this.SendPropertyChanged("Foundation_Date");
					this.OnFoundation_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Twitter", DbType="NVarChar(63)")]
		public string Twitter
		{
			get
			{
				return this._Twitter;
			}
			set
			{
				if ((this._Twitter != value))
				{
					this.OnTwitterChanging(value);
					this.SendPropertyChanging();
					this._Twitter = value;
					this.SendPropertyChanged("Twitter");
					this.OnTwitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CEO", DbType="Int")]
		public System.Nullable<int> ceoID
		{
			get
			{
				return this._CEO;
			}
			set
			{
				if ((this._CEO != value))
				{
					this.OnceoIDChanging(value);
					this.SendPropertyChanging();
					this._CEO = value;
					this.SendPropertyChanged("ceoID");
					this.OnceoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncubID", DbType="Int")]
		public System.Nullable<int> IncubID
		{
			get
			{
				return this._IncubID;
			}
			set
			{
				if ((this._IncubID != value))
				{
					if (this._Business_Incubator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncubIDChanging(value);
					this.SendPropertyChanging();
					this._IncubID = value;
					this.SendPropertyChanged("IncubID");
					this.OnIncubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DevStageID", DbType="Int NOT NULL")]
		public int DevStageID
		{
			get
			{
				return this._DevStageID;
			}
			set
			{
				if ((this._DevStageID != value))
				{
					if (this._Development_Stage1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDevStageIDChanging(value);
					this.SendPropertyChanging();
					this._DevStageID = value;
					this.SendPropertyChanged("DevStageID");
					this.OnDevStageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Startup_Application", Storage="_Applications", ThisKey="ID", OtherKey="StartupID")]
		public EntitySet<Application> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Startup_Round_Of_Funding", Storage="_Round_Of_Fundings", ThisKey="ID", OtherKey="StartupID")]
		public EntitySet<Round_Of_Funding> Round_Of_Fundings
		{
			get
			{
				return this._Round_Of_Fundings;
			}
			set
			{
				this._Round_Of_Fundings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Startup_Startup", Storage="_Startups", ThisKey="ID", OtherKey="Competitors")]
		public EntitySet<Startup> Startups
		{
			get
			{
				return this._Startups;
			}
			set
			{
				this._Startups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Startup_Startup_Member", Storage="_Startup_Members", ThisKey="ID", OtherKey="StartupID")]
		public EntitySet<Startup_Member> Startup_Members
		{
			get
			{
				return this._Startup_Members;
			}
			set
			{
				this._Startup_Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Startup_Startup", Storage="_Startup1", ThisKey="Competitors", OtherKey="ID", IsForeignKey=true)]
		public Startup Startup1
		{
			get
			{
				return this._Startup1.Entity;
			}
			set
			{
				Startup previousValue = this._Startup1.Entity;
				if (((previousValue != value) 
							|| (this._Startup1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Startup1.Entity = null;
						previousValue.Startups.Remove(this);
					}
					this._Startup1.Entity = value;
					if ((value != null))
					{
						value.Startups.Add(this);
						this._Competitors = value.ID;
					}
					else
					{
						this._Competitors = default(Nullable<int>);
					}
					this.SendPropertyChanged("Startup1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Development_Stage_Startup", Storage="_Development_Stage1", ThisKey="DevStageID", OtherKey="ID", IsForeignKey=true)]
		public Development_Stage Development_Stage1
		{
			get
			{
				return this._Development_Stage1.Entity;
			}
			set
			{
				Development_Stage previousValue = this._Development_Stage1.Entity;
				if (((previousValue != value) 
							|| (this._Development_Stage1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Development_Stage1.Entity = null;
						previousValue.Startups1.Remove(this);
					}
					this._Development_Stage1.Entity = value;
					if ((value != null))
					{
						value.Startups1.Add(this);
						this._DevStageID = value.ID;
					}
					else
					{
						this._DevStageID = default(int);
					}
					this.SendPropertyChanged("Development_Stage1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Business_Incubator_Startup", Storage="_Business_Incubator", ThisKey="IncubID", OtherKey="ID", IsForeignKey=true)]
		public Business_Incubator Business_Incubator
		{
			get
			{
				return this._Business_Incubator.Entity;
			}
			set
			{
				Business_Incubator previousValue = this._Business_Incubator.Entity;
				if (((previousValue != value) 
							|| (this._Business_Incubator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Business_Incubator.Entity = null;
						previousValue.Startups.Remove(this);
					}
					this._Business_Incubator.Entity = value;
					if ((value != null))
					{
						value.Startups.Add(this);
						this._IncubID = value.ID;
					}
					else
					{
						this._IncubID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Business_Incubator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Startup = this;
		}
		
		private void detach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Startup = null;
		}
		
		private void attach_Round_Of_Fundings(Round_Of_Funding entity)
		{
			this.SendPropertyChanging();
			entity.Startup = this;
		}
		
		private void detach_Round_Of_Fundings(Round_Of_Funding entity)
		{
			this.SendPropertyChanging();
			entity.Startup = null;
		}
		
		private void attach_Startups(Startup entity)
		{
			this.SendPropertyChanging();
			entity.Startup1 = this;
		}
		
		private void detach_Startups(Startup entity)
		{
			this.SendPropertyChanging();
			entity.Startup1 = null;
		}
		
		private void attach_Startup_Members(Startup_Member entity)
		{
			this.SendPropertyChanging();
			entity.Startup = this;
		}
		
		private void detach_Startup_Members(Startup_Member entity)
		{
			this.SendPropertyChanging();
			entity.Startup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Startup_Members")]
	public partial class Startup_Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StartupID;
		
		private int _UserID;
		
		private string _Address;
		
		private bool _Is_CEO;
		
		private string _Phone;
		
		private string _Skype;
		
		private string _Twitter;
		
		private string _About;
		
		private EntityRef<Startup> _Startup;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStartupIDChanging(int value);
    partial void OnStartupIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIs_CEOChanging(bool value);
    partial void OnIs_CEOChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnSkypeChanging(string value);
    partial void OnSkypeChanged();
    partial void OnTwitterChanging(string value);
    partial void OnTwitterChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    #endregion
		
		public Startup_Member()
		{
			this._Startup = default(EntityRef<Startup>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartupID", DbType="Int NOT NULL")]
		public int StartupID
		{
			get
			{
				return this._StartupID;
			}
			set
			{
				if ((this._StartupID != value))
				{
					if (this._Startup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStartupIDChanging(value);
					this.SendPropertyChanging();
					this._StartupID = value;
					this.SendPropertyChanged("StartupID");
					this.OnStartupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(45)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_CEO", DbType="Bit NOT NULL")]
		public bool Is_CEO
		{
			get
			{
				return this._Is_CEO;
			}
			set
			{
				if ((this._Is_CEO != value))
				{
					this.OnIs_CEOChanging(value);
					this.SendPropertyChanging();
					this._Is_CEO = value;
					this.SendPropertyChanged("Is_CEO");
					this.OnIs_CEOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(45)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skype", DbType="NVarChar(45)")]
		public string Skype
		{
			get
			{
				return this._Skype;
			}
			set
			{
				if ((this._Skype != value))
				{
					this.OnSkypeChanging(value);
					this.SendPropertyChanging();
					this._Skype = value;
					this.SendPropertyChanged("Skype");
					this.OnSkypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Twitter", DbType="NVarChar(45)")]
		public string Twitter
		{
			get
			{
				return this._Twitter;
			}
			set
			{
				if ((this._Twitter != value))
				{
					this.OnTwitterChanging(value);
					this.SendPropertyChanging();
					this._Twitter = value;
					this.SendPropertyChanged("Twitter");
					this.OnTwitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_About", DbType="NVarChar(MAX)")]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Startup_Startup_Member", Storage="_Startup", ThisKey="StartupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Startup Startup
		{
			get
			{
				return this._Startup.Entity;
			}
			set
			{
				Startup previousValue = this._Startup.Entity;
				if (((previousValue != value) 
							|| (this._Startup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Startup.Entity = null;
						previousValue.Startup_Members.Remove(this);
					}
					this._Startup.Entity = value;
					if ((value != null))
					{
						value.Startup_Members.Add(this);
						this._StartupID = value.ID;
					}
					else
					{
						this._StartupID = default(int);
					}
					this.SendPropertyChanged("Startup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Startup_Member", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Startup_Members.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Startup_Members.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Role")]
	public partial class User_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RoleID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public User_Role()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User_Role", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.User_Roles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.User_Roles.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Role", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.User_Roles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.User_Roles.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Email;
		
		private string _Password;
		
		private string _Accaunt_Pic;
		
		private string _FName;
		
		private string _LName;
		
		private System.DateTime _RegDate;
		
		private System.DateTime _LoggedDate;
		
		private EntitySet<AngelInvestor> _AngelInvestors;
		
		private EntitySet<Investment_Manager> _Investment_Managers;
		
		private EntitySet<Startup_Member> _Startup_Members;
		
		private EntitySet<User_Role> _User_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAccaunt_PicChanging(string value);
    partial void OnAccaunt_PicChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    partial void OnRegDateChanging(System.DateTime value);
    partial void OnRegDateChanged();
    partial void OnLoggedDateChanging(System.DateTime value);
    partial void OnLoggedDateChanged();
    #endregion
		
		public User()
		{
			this._AngelInvestors = new EntitySet<AngelInvestor>(new Action<AngelInvestor>(this.attach_AngelInvestors), new Action<AngelInvestor>(this.detach_AngelInvestors));
			this._Investment_Managers = new EntitySet<Investment_Manager>(new Action<Investment_Manager>(this.attach_Investment_Managers), new Action<Investment_Manager>(this.detach_Investment_Managers));
			this._Startup_Members = new EntitySet<Startup_Member>(new Action<Startup_Member>(this.attach_Startup_Members), new Action<Startup_Member>(this.detach_Startup_Members));
			this._User_Roles = new EntitySet<User_Role>(new Action<User_Role>(this.attach_User_Roles), new Action<User_Role>(this.detach_User_Roles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accaunt_Pic", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Accaunt_Pic
		{
			get
			{
				return this._Accaunt_Pic;
			}
			set
			{
				if ((this._Accaunt_Pic != value))
				{
					this.OnAccaunt_PicChanging(value);
					this.SendPropertyChanging();
					this._Accaunt_Pic = value;
					this.SendPropertyChanged("Accaunt_Pic");
					this.OnAccaunt_PicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegDate", DbType="datetime")]
		public System.DateTime RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggedDate", DbType="datetime")]
		public System.DateTime LoggedDate
		{
			get
			{
				return this._LoggedDate;
			}
			set
			{
				if ((this._LoggedDate != value))
				{
					this.OnLoggedDateChanging(value);
					this.SendPropertyChanging();
					this._LoggedDate = value;
					this.SendPropertyChanged("LoggedDate");
					this.OnLoggedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AngelInvestor", Storage="_AngelInvestors", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<AngelInvestor> AngelInvestors
		{
			get
			{
				return this._AngelInvestors;
			}
			set
			{
				this._AngelInvestors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Investment_Manager", Storage="_Investment_Managers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Investment_Manager> Investment_Managers
		{
			get
			{
				return this._Investment_Managers;
			}
			set
			{
				this._Investment_Managers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Startup_Member", Storage="_Startup_Members", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Startup_Member> Startup_Members
		{
			get
			{
				return this._Startup_Members;
			}
			set
			{
				this._Startup_Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Role", Storage="_User_Roles", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<User_Role> User_Roles
		{
			get
			{
				return this._User_Roles;
			}
			set
			{
				this._User_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AngelInvestors(AngelInvestor entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AngelInvestors(AngelInvestor entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Investment_Managers(Investment_Manager entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Investment_Managers(Investment_Manager entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Startup_Members(Startup_Member entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Startup_Members(Startup_Member entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_User_Roles(User_Role entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_User_Roles(User_Role entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
